*************************************************************************************************************
* ██████╗██╗   ██╗██████╗ ███████╗██████╗     ███████╗███████╗ ██████╗██╗   ██╗██████╗ ██╗████████╗██╗   ██╗*
*██╔════╝╚██╗ ██╔╝██╔══██╗██╔════╝██╔══██╗    ██╔════╝██╔════╝██╔════╝██║   ██║██╔══██╗██║╚══██╔══╝╚██╗ ██╔╝*
*██║      ╚████╔╝ ██████╔╝█████╗  ██████╔╝    ███████╗█████╗  ██║     ██║   ██║██████╔╝██║   ██║    ╚████╔╝ *
*██║       ╚██╔╝  ██╔══██╗██╔══╝  ██╔══██╗    ╚════██║██╔══╝  ██║     ██║   ██║██╔══██╗██║   ██║     ╚██╔╝  *
*╚██████╗   ██║   ██████╔╝███████╗██║  ██║    ███████║███████╗╚██████╗╚██████╔╝██║  ██║██║   ██║      ██║   *
* ╚═════╝   ╚═╝   ╚═════╝ ╚══════╝╚═╝  ╚═╝    ╚══════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝   ╚═╝      ╚═╝   *
*                                                                                                           *                                                 
*************************************************************************************************************

      Mr. Warren's Class Notes
      Ethical Hacking and Cyber Security
      September 2024 — 6th Period
-------------------------------------------------------------------------------------------------------------

Welcome to your reference guide! 
Use `Ctrl-F` to search terms, commands, and definitions easily. 
Each section contains a short-form definition followed by more details if needed. 
Happy hacking!
-------------------------------------------------------------------------------------------------------------

* Sections:
  - [Commands]
  - [Networking]
  - [File Permissions & chmod]
  - [Process Management]
  - [Package Management]
  - [Terminology]

-------------------------------------------------------------------------------------------------------------
                      [COMMANDS]
-------------------------------------------------------------------------------------------------------------

1. **ls**:
    - List contents of a directory.
    - More: Use `ls -la` for detailed view including hidden files.

2. **pwd**:
    - Print working directory (shows your current location).

3. **cd**:
    - Change directory. Use `cd ..` to move up one directory.

4. **mkdir**:
    - Make a new directory.
    - More: `mkdir myfolder` creates "myfolder".

5. **touch**:
    - Create an empty file.
    - More: `touch newfile.txt` creates "newfile.txt".

6. **rm**:
    - Remove a file. Use `rm -r` to delete a directory.

7. **cp**:
    - Copy files or directories.
    - More: `cp file1.txt /newfolder/` copies file1 to /newfolder/.

8. **mv**:
    - Move or rename files.
    - More: `mv oldname.txt newname.txt` renames the file.

9. **cat**:
    - Show contents of a file.
    - More: `cat file.txt` shows file contents on the terminal.

-------------------------------------------------------------------------------------------------------------
                      [NETWORKING]
-------------------------------------------------------------------------------------------------------------

1. **ifconfig** or **ip a**:
    - View network interfaces and IP addresses.

2. **ping**:
    - Test network connectivity.
    - More: `ping google.com` checks if you can reach Google's servers.

3. **traceroute**:
    - Trace the path packets take to a destination.
    - More: `traceroute google.com`.

4. **netstat**:
    - Display network connections and open ports.
    - More: Use `netstat -tuln` for TCP/UDP connections.

5. **nmap**:
    - Network mapping tool to scan open ports.
    - More: `nmap localhost` to scan your own machine.

-------------------------------------------------------------------------------------------------------------
           [FILE PERMISSIONS & chmod EXAMPLES]
-------------------------------------------------------------------------------------------------------------

1. **chmod**:
    - Change file permissions using numeric codes.
    
    ### **Permission Breakdown**:
      - `r` = Read (4)
      - `w` = Write (2)
      - `x` = Execute (1)
    
    ### **Examples**:
    - `chmod 755 file.sh`: 
      - Owner: Full (rwx)
      - Group: Read & Execute (rx)
      - Others: Read & Execute (rx)
    
    - `chmod 644 file.txt`: 
      - Owner: Read & Write (rw)
      - Group: Read (r)
      - Others: Read (r)
    
    - `chmod 777 folder`: 
      - Everyone has full permissions (rwx).
    
    ### **More combinations**:
    - **700**: Owner has full (rwx); no access for group/others.
    - **600**: Owner can read/write; no access for group/others.
    - **555**: All users can read and execute, but no one can write.
    - **400**: Owner can read only; no access for group/others.

2. **chown**:
    - Change file ownership.
    - More: `sudo chown user:group file.txt` to change owner/group.

3. **ls -l**:
    - View file permissions in detail.

-------------------------------------------------------------------------------------------------------------
              [PROCESS MANAGEMENT]
-------------------------------------------------------------------------------------------------------------

1. **top**:
    - Show system processes and their resource usage.

2. **ps**:
    - Display a snapshot of running processes.

3. **kill**:
    - Terminate a process by ID.
    - More: `kill 1234` ends process with ID 1234.

4. **df**:
    - Show disk space usage.
    - More: `df -h` for human-readable sizes.

5. **du**:
    - Show directory sizes.
    - More: `du -h foldername`.

6. **free**:
    - Show memory usage (RAM and swap).

-------------------------------------------------------------------------------------------------------------
              [PACKAGE MANAGEMENT]
-------------------------------------------------------------------------------------------------------------

1. **sudo apt-get update**:
    - Update the package list.

2. **sudo apt-get upgrade**:
    - Upgrade installed packages to the latest version.

3. **sudo apt-get install**:
    - Install new software packages.
    - More: `sudo apt-get install nmap` installs nmap tool.

4. **sudo apt-get remove**:
    - Remove software packages.

-------------------------------------------------------------------------------------------------------------
                      [TERMINOLOGY]
-------------------------------------------------------------------------------------------------------------

1. **Ethical Hacking**:
    - The practice of legally breaking into systems to identify weaknesses before malicious hackers do.

2. **Penetration Testing**:
    - Simulating cyberattacks to evaluate the security of a system.

3. **Firewall**:
    - A network security system that monitors and controls incoming/outgoing network traffic based on security rules.

4. **Vulnerability**:
    - A weakness in a system that can be exploited by a threat.

5. **Exploit**:
    - A piece of code or technique used to take advantage of a vulnerability.

6. **Patch**:
    - An update or fix designed to improve security and resolve vulnerabilities in software.

7. **Malware**:
    - Malicious software designed to damage or disrupt systems, such as viruses, worms, or ransomware.

8. **Zero-Day**:
    - A vulnerability that is exploited before the software vendor has issued a fix.

9. **Encryption**:
    - The process of converting data into a secure format to prevent unauthorized access.

10. **IP Address**:
    - A unique identifier for a device on a network.

11. **Port Scanning**:
    - The technique of probing a system's open ports to identify possible points of entry.

-------------------------------------------------------------------------------------------------------------
**Use `Ctrl-F` to search through these notes easily!** 
Stay focused, stay curious, and have fun learning ethical hacking!
-------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------
                            Setting Up a VM (Virtual Machine) wwith debian
---------------------------------------------------------------------------------------------------------------
Here's a step-by-step guide to setting up a **Debian virtual machine** using **Oracle VirtualBox on Windows 11**:

---

### 🚀 **Step 1: Download Required Software**

1. **[Oracle VirtualBox](https://www.virtualbox.org/wiki/Downloads)**  
   Download and install the latest version for Windows.

2. **[Debian ISO](https://www.debian.org/distrib/netinst)**  
   Download the Debian installer ISO (choose the amd64 architecture if you're on a modern PC).

---

### 🛠️ **Step 2: Create a New Virtual Machine in VirtualBox**

1. **Open VirtualBox** and click **"New"**.

2. **Name:**  
   Give your VM a name like `Debian`.

3. **Machine Folder:**  
   Choose where you want to store the VM files.

4. **Type:** `Linux`  
   **Version:** `Debian (64-bit)` *(make sure Virtualization is enabled in BIOS if you don't see 64-bit)*

5. **Memory Size:**  
   Recommended: At least **2048 MB (2 GB)**, or more if you can spare it.

6. **Hard Disk:**  
   - Select **"Create a virtual hard disk now"**
   - Click **"Create"**

---

### 💾 **Step 3: Configure the Virtual Hard Disk**

1. **Hard disk file type:**  
   Leave it as **VDI (VirtualBox Disk Image)**

2. **Storage on physical hard disk:**  
   Choose **Dynamically allocated**

3. **File location and size:**  
   - Choose a location
   - Size: **At least 10 GB** (20+ GB recommended for desktop environments)

---

### 🧰 **Step 4: Attach Debian ISO**

1. With the VM selected, click **"Settings" → "Storage"**

2. Under the **"Controller: IDE"**, click the **Empty CD icon**, then on the right click the **disk icon → "Choose a disk file..."**

3. Select your downloaded **Debian ISO** file.

---

### 🔧 **Step 5: Boot and Install Debian**

1. Start the VM (click **"Start"**)

2. Debian installation will begin. Choose:
   - **Language**
   - **Location/Region**
   - **Keyboard layout**
   - **Hostname** (e.g. `debian-vm`)
   - **Domain name** (optional)
   - **User accounts**: Create a root and/or standard user
   - **Disk partitioning**: Guided partitioning is easiest (use entire disk)

3. Choose software:
   - For desktop: Select **GNOME**, **XFCE**, or **KDE**
   - For minimal: Skip desktop environments

4. Let installation finish and remove ISO when prompted.

---

### ✅ **Step 6: Post-Install Tweaks**

- Log in with your user
- Update system:  
  ```bash
  sudo apt update && sudo apt upgrade
  ```

- Install guest additions:
   - In VirtualBox menu → **Devices → Insert Guest Additions CD image**
   - Mount it and run the installer inside Debian:
     ```bash
     sudo sh /media/cdrom/VBoxLinuxAdditions.run
     ```

---

IF when made your VirtualMachine IF and you have NO ACCESS to your sudoers file information do this; [ LEGEND (Sam represents your - username) (_ represents pace counting) ]
     First type in 'whoami' and if it says root you sould be good to go if not continue reading...
[but just in casse your still having the problems try 'exit' then try again with the 'whoami' statment] 

      -[Sam]@nameofmachine~$ su_-_
            -It should have asked for your password
            -You should also be in root (root@___)
      -usermod_-aG_sudo_Sam
      -su_-_Sam
Then from there you should be able to use any Sudoers command now that it's given you access 


"Sysadmin" is a shortened term for System Administrator. System administrators are IT professionals responsible for managing and maintaining computer systems, especially servers and networks, ensuring they are reliable, secure, and meet the needs of users. They handle tasks like installing, configuring, and updating software, troubleshooting problems, and monitoring system performance. 
Here's a more detailed breakdown:
Responsibilities:
Installing, configuring, and maintaining computer systems, including servers and networks. 
Ensuring system security through patches and security measures. 
Troubleshooting technical issues and maintaining system uptime. 
Monitoring system performance and resource utilization. 
Managing user accounts and permissions. 
Implementing and maintaining backup and disaster recovery plans. 
Skills:
Strong understanding of operating systems (Windows, Linux, etc.). 
Knowledge of networking concepts and protocols. 
Ability to troubleshoot and diagnose system issues. 
Problem-solving and critical thinking skills. 
Excellent communication and collaboration skills


------------------------------------------------------------------------------------
                                    What is -M & -g
------------------------------------------------------------------------------------

-g Flag
_____________
In coding, especially when dealing with **compilers** or **command-line tools**, the `-g` flag generally refers to **"generate debug information."**

### Common usage:
#### 1. **In C/C++ with `gcc` or `g++` (GNU Compiler Collection):**
```bash
g++ -g mycode.cpp -o myprogram
```
- The `-g` flag tells the compiler to include **debugging information** in the binary.
- This allows you to use a debugger like `gdb` to step through your code, inspect variables, set breakpoints, etc.

#### 2. **In other tools and environments:**
The meaning of `-g` can vary depending on the tool or language you're using. Here are a few examples:
- **Node.js / npm:**  
  `npm install -g` — the `-g` flag means "global." It installs the package globally instead of locally.
- **grep / sed / regex tools:**  
  Not typically `-g`, but sometimes used to indicate a **global** replacement or match (more common in scripting languages like Perl or JavaScript with `/g` regex flag).
- **Makefiles or build systems:**  
  It might be passed down to the compiler to enable debugging.

If you tell me what language or tool you saw it in, I can give a more specific answer!

-M Flag
__________
The `-M` flag also varies depending on the tool or language being used, but here's a breakdown of the most common meanings in coding contexts:

---

### 🔧 **In `gcc` / `g++` (C/C++ compilers):**
```bash
gcc -M file.c
```
- The `-M` flag tells the compiler to **generate a list of header file dependencies** for a source file.
- It outputs the `#include` dependency list in a format suitable for a **Makefile**.
- This is useful for automated build systems to know when to recompile files if a header changes.

---

### 📦 **In `npm` (Node.js Package Manager):**
There’s **no standard `-M` flag** in `npm`. If you saw it here, it might be a typo or part of a custom script.

---

### 🧪 **In testing tools or custom CLI apps:**
Some tools define their own flags, and `-M` might stand for:
- "Mode"
- "Module"
- "Memory"
- "Manifest"
- etc.

---

### ✅ Summary:
| Tool         | Meaning of `-M`                             |
|--------------|---------------------------------------------|
| `gcc/g++`    | Generate Makefile-style header dependencies |
| Custom tools | Depends on the tool (mode, module, etc.)    |



----------------------------------------------------------------
                              ZooLab
----------------------------------------------------------------

|
├── /research_education
│ └── endangered_species_report.docx
│ └── educational_programs/
│ └── zoo_tour_script.txt
│ └── kids_activity_handout.pdf
|
├── /guest_services
│ └── ticket_prices_2025.csv
│ └── incident_reports/
│ └── lost_child_2024-07-12.txt
|
├── /maintenance
│ └── equipment_checklist.txt
│ └── repair_log.csv
|
├── /it
│ └── system_config/
│ └── network_map.png
│ └── server_backup_plan.md
│ └── credentials_template.txt
|
├── /security
│ └── camera_zones_map.jpg
│ └── incident_log_2025.txt
|
Here’s the updated list of commands to include the new folders and files in the `/zoo` digital structure:

```bash
# Continue inside the zoo directory structure

|
├── /research_education
│ └── endangered_species_report.docx
│ └── educational_programs/
│ └── zoo_tour_script.txt
│ └── kids_activity_handout.pdf
|
├── /guest_services
│ └── ticket_prices_2025.csv
│ └── incident_reports/
│ └── lost_child_2024-07-12.txt
|
├── /maintenance
│ └── equipment_checklist.txt
│ └── repair_log.csv
|
├── /it
│ └── system_config/
│ └── network_map.png
│ └── server_backup_plan.md
│ └── credentials_template.txt
|
├── /security
│ └── camera_zones_map.jpg
│ └── incident_log_2025.txt
| 
└── /volunteers
    └── volunteer_handbook.pdf
    └── task_assignments.csv


# Research & Education
mkdir -p zoo/research_education/educational_programs
touch zoo/research_education/endangered_species_report.docx
touch zoo/research_education/educational_programs/zoo_tour_script.txt
touch zoo/research_education/educational_programs/kids_activity_handout.pdf

# Guest Services
mkdir -p zoo/guest_services/incident_reports
touch zoo/guest_services/ticket_prices_2025.csv
touch zoo/guest_services/incident_reports/lost_child_2024-07-12.txt

# Maintenance
mkdir -p zoo/maintenance
touch zoo/maintenance/equipment_checklist.txt
touch zoo/maintenance/repair_log.csv

# IT
mkdir -p zoo/it/system_config
touch zoo/it/system_config/network_map.png
touch zoo/it/system_config/server_backup_plan.md
touch zoo/it/system_config/credentials_template.txt

# Security
mkdir -p zoo/security
touch zoo/security/camera_zones_map.jpg
touch zoo/security/incident_log_2025.txt
```

Here’s the updated list of commands to include the new folders and files in the `/zoo` digital structure:

```bash
# Continue inside the zoo directory structure

# Research & Education
mkdir -p zoo/research_education/educational_programs
touch zoo/research_education/endangered_species_report.docx
touch zoo/research_education/educational_programs/zoo_tour_script.txt
touch zoo/research_education/educational_programs/kids_activity_handout.pdf

# Guest Services
mkdir -p zoo/guest_services/incident_reports
touch zoo/guest_services/ticket_prices_2025.csv
touch zoo/guest_services/incident_reports/lost_child_2024-07-12.txt

# Maintenance
mkdir -p zoo/maintenance
touch zoo/maintenance/equipment_checklist.txt
touch zoo/maintenance/repair_log.csv

# IT
mkdir -p zoo/it/system_config
touch zoo/it/system_config/network_map.png
touch zoo/it/system_config/server_backup_plan.md
touch zoo/it/system_config/credentials_template.txt

# Security
mkdir -p zoo/security
touch zoo/security/camera_zones_map.jpg
touch zoo/security/incident_log_2025.txt
```
mkdir -p zoo/volunteers
touch zoo/volunteers/volunteer_handbook.pdf
touch zoo/volunteers/task_assignments.csv
mv zoo/volunteers/task_assignments.csv zoo/volunteers/NEW_NAME.csv


In detail
_____________

To recreate this file structure using the terminal, follow these steps. You can copy and paste these commands into a UNIX/Linux/macOS terminal or a Windows terminal with a compatible shell (like Git Bash or WSL):

```bash
# Step 1: Create the root directory
mkdir -p zoo

# Step 2: Create subdirectories
mkdir -p zoo/executives
mkdir -p zoo/management
mkdir -p zoo/veterinary/animal_health_records
mkdir -p zoo/animal_care

# Step 3: Create empty placeholder files

# Executives
touch zoo/executives/annual_report_2024.pdf
touch zoo/executives/board_meeting_minutes.txt

# Management
touch zoo/management/staff_schedule.csv
touch zoo/management/department_budgets.xlsx

# Veterinary
touch zoo/veterinary/animal_health_records/gorilla_health_log.txt
touch zoo/veterinary/animal_health_records/lion_medical_history.docx
touch zoo/veterinary/animal_health_records/vaccine_inventory.csv

# Animal Care
touch zoo/animal_care/feeding_schedule.csv
touch zoo/animal_care/enrichment_ideas.txt
```

Let me know if you want a script version or a version that checks if the folders already exist before creating them!
```bash
# Continue inside the zoo directory structure

# Research & Education
mkdir -p zoo/research_education/educational_programs
touch zoo/research_education/endangered_species_report.docx
touch zoo/research_education/educational_programs/zoo_tour_script.txt
touch zoo/research_education/educational_programs/kids_activity_handout.pdf

# Guest Services
mkdir -p zoo/guest_services/incident_reports
touch zoo/guest_services/ticket_prices_2025.csv
touch zoo/guest_services/incident_reports/lost_child_2024-07-12.txt

# Maintenance
mkdir -p zoo/maintenance
touch zoo/maintenance/equipment_checklist.txt
touch zoo/maintenance/repair_log.csv

# IT
mkdir -p zoo/it/system_config
touch zoo/it/system_config/network_map.png
touch zoo/it/system_config/server_backup_plan.md
touch zoo/it/system_config/credentials_template.txt

# Security
mkdir -p zoo/security
touch zoo/security/camera_zones_map.jpg
touch zoo/security/incident_log_2025.txt
```

Let me know if you'd like to turn this into a shell script for easier reuse or deployment!
```
└── /volunteers
    └── volunteer_handbook.pdf
    └── task_assignments.csv
```

### ✅ Here's what you should do:

1. **Create the folder**:
```bash
mkdir -p zoo/volunteers
```

2. **Create the files (with a guess at the cutoff one)**:
```bash
touch zoo/volunteers/volunteer_handbook.pdf
touch zoo/volunteers/task_assignments.csv
```

If you find out the file should be named something different later, you can just rename it using:

```bash
mv zoo/volunteers/task_assignments.csv zoo/volunteers/NEW_NAME.csv
```

share holder - own abt 1 share
stake holder - stake (affection by what does or doesn't happen)
